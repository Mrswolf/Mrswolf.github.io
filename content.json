{"meta":{"title":"swolf的博客","subtitle":"记录我的学习生活","description":"欢迎光临，这里是swolf的博客~","author":"swolf","url":"https://mrswolf.github.io","root":"/"},"pages":[{"title":"About","date":"2022-03-21T14:29:10.291Z","updated":"2022-03-21T14:29:10.291Z","comments":false,"path":"about/index.html","permalink":"https://mrswolf.github.io/about/index.html","excerpt":"","text":"我是一名生物医学工程在读博士，主要研究方向为脑-机接口、机器学习和神经科学理论。 当然喽， 搞脑-机接口是找不到工作的， 咱又不是大佬~ 因此， 为了毕业能恰饭，也在自学CS的相关知识，希望能够转行T_T。 博客主要记录我在学习过程中的心得体会，也会抽空写一些BCI领域的知识，算是对自己有个交待。 文章转载只需注明出处即可～ Enjoy!"},{"title":"Categories","date":"2022-03-20T06:42:42.326Z","updated":"2022-03-20T06:42:42.326Z","comments":false,"path":"categories/index.html","permalink":"https://mrswolf.github.io/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2022-03-20T06:39:10.873Z","updated":"2022-03-20T06:39:10.873Z","comments":false,"path":"repository/index.html","permalink":"https://mrswolf.github.io/repository/index.html","excerpt":"","text":""},{"title":"Tags","date":"2022-03-21T07:21:55.131Z","updated":"2022-03-21T07:21:55.131Z","comments":false,"path":"tags/index.html","permalink":"https://mrswolf.github.io/tags/index.html","excerpt":"","text":""},{"title":"Links","date":"2022-03-20T06:41:20.079Z","updated":"2022-03-20T06:41:20.079Z","comments":false,"path":"links/index.html","permalink":"https://mrswolf.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"主成分分析PCA","slug":"pca","date":"2019-12-10T16:00:00.000Z","updated":"2022-03-20T16:00:00.000Z","comments":false,"path":"2019/12/11/pca/","link":"","permalink":"https://mrswolf.github.io/2019/12/11/pca/","excerpt":"主成分分析（Principle Component Analysis，PCA）是常用的一种矩阵分解算法，PCA通过旋转原始空间来使得数据在各个正交轴上的投影最大，通过选择前几个正交轴可以实现数据降维的目的。","text":"主成分分析（Principle Component Analysis，PCA）是常用的一种矩阵分解算法，PCA通过旋转原始空间来使得数据在各个正交轴上的投影最大，通过选择前几个正交轴可以实现数据降维的目的。 PCA数学原理 优化问题 PCA的优化问题如下： arg max⁡Wtrace(WTXXTW)s.t.WTW=I\\begin{aligned} \\argmax_{\\mathbf{W}}\\quad &amp;\\mathrm{trace}\\left(\\mathbf{W}^T\\mathbf{X}\\mathbf{X}^T\\mathbf{W}\\right)\\\\ \\textrm{s.t.}\\quad &amp;\\mathbf{W}^T\\mathbf{W} = \\mathbf{I} \\end{aligned} Wargmax​s.t.​trace(WTXXTW)WTW=I​ 其中X∈RM×N\\mathbf{X} \\in \\mathbb{R}^{M \\times N}X∈RM×N是数据，W∈RM×M\\mathbf{W} \\in \\mathbb{R}^{M \\times M}W∈RM×M是投影矩阵，NNN是样本点个数，MMM是特征个数。PCA要求数据X\\mathbf{X}X做零均值处理，优化问题的解可以转化为如下特征值分解问题的解： (XXT)W=WΛ\\left(\\mathbf{X}\\mathbf{X}^T\\right)\\mathbf{W} = \\mathbf{W}\\mathbf{\\Lambda} (XXT)W=WΛ 这里假设W\\mathbf{W}W的列向量按相应特征值的大小从大到小排列，保留W\\mathbf{W}W前K列即前K个成分的列向量W^\\hat{\\mathbf{W}}W^，降维后的数据特征为： X^=W^TX\\hat{\\mathbf{X}} = \\hat{\\mathbf{W}}^T\\mathbf{X} X^=W^TX 其中X^∈RK×N\\hat{\\mathbf{X}} \\in \\mathbb{R}^{K \\times N}X^∈RK×N。 sklearn实现分析 svd替代eig sklearn中的PCA实现并未使用eig而是使用svd，主要原因是svd比eig具有更好的数值稳定性（当然代价是其计算时间要比eig更长）。使用svd代替eig也是很多学者如Andrew Ng建议的策略，在StackExchange上也有关于svd和eig的相关讨论讨论1、讨论2。sklearn中直接对数据矩阵X\\mathbf{X}X而不是协方差矩阵XXT\\mathbf{X}\\mathbf{X}^TXXT做svd，其等价关系如下： X=UΣVTXXT=UΣ2UTW=UΛ=Σ2\\begin{aligned} \\mathbf{X} &amp;= \\mathbf{U} \\mathbf{\\Sigma} \\mathbf{V}^T\\\\ \\mathbf{X}\\mathbf{X}^T &amp;= \\mathbf{U} \\mathbf{\\Sigma}^2 \\mathbf{U}^T\\\\ \\mathbf{W} &amp;= \\mathbf{U}\\\\ \\mathbf{\\Lambda} &amp;= \\mathbf{\\Sigma}^2 \\end{aligned} XXXTWΛ​=UΣVT=UΣ2UT=U=Σ2​ sign ambiguity问题 sklearn的PCA代码中还考虑了svd的sign ambiguity问题，即每个奇异向量的符号在求解过程中是不确定的（例如，将uk\\mathbf{u}_kuk​和vk\\mathbf{v}_kvk​同时乘以-1也满足求解条件）。svd算法（包括eig）中的奇异向量符号只是确保数值稳定性的副产品，类似随机分配符号，并无实际意义。 sklearn使用svd_flip(u, v, u_based_descision=True)函数来确保输出确定性的奇异向量符号，例如，如果u_based_decision=True，则要求U\\mathbf{U}U的每一列奇异向量中绝对值最大的元素的符号始终为正，V\\mathbf{V}V也要相对的做出调整。 鉴于MATLAB是算法开发的标准之一，我很好奇MATLAB是如何处理SVD的sign ambiguity问题的。MATLAB的svd函数的官方文档中有这样一句话: Different machines and releases of MATLAB® can produce different singular vectors that are still numerically accurate. Corresponding columns in U and V can flip their signs, since this does not affect the value of the expression A = USV’. MATLAB的eig函数的官方文档中亦提到： For real eigenvectors, the sign of the eigenvectors can change. 可以看出MATLAB也未保证符号的确定性。同样在MATALB的社区里也有人问了这个问题，并引导我看了这篇Resolving the Sign Ambiguity in the Singular Value Decompostion的文献。 文献中指出，sklearn的svd_flip方法是一种临时方案（ad hoc），并未从数据分析或者解释的角度来解决sign ambiguity问题。解决sign ambiguity的核心是如何为奇异向量选择一个“有意义”的符号。什么叫“有意义”？比方说我们要研究4种品牌汽车的每公里耗油量，做了4次抽样，构成数据矩阵： X=[4223515111169101411691014]\\mathbf{X} = \\begin{bmatrix} 4 &amp;22&amp;3 &amp;5 \\\\ 1 &amp;5 &amp;1 &amp;1 \\\\ 11&amp;69&amp;10&amp;14 \\\\ 11&amp;69&amp;10&amp;14 \\\\ \\end{bmatrix} X=⎣⎢⎢⎡​411111​2256969​311010​511414​⎦⎥⎥⎤​ 其中每一列是一种品牌汽车的耗油量，每一行为抽样情况，svd分解有X=UΣVT\\mathbf{X}=\\mathbf{U} \\mathbf{\\Sigma} \\mathbf{V}^TX=UΣVT。我们来看一下numpy.linalg.svd计算得到的V\\mathbf{V}V的第一个奇异向量： v0=[−0.15−0.96−0.14−0.20]\\mathbf{v}_0 = \\begin{bmatrix} -0.15 \\\\ -0.96 \\\\ -0.14 \\\\ -0.20 \\\\ \\end{bmatrix} v0​=⎣⎢⎢⎡​−0.15−0.96−0.14−0.20​⎦⎥⎥⎤​ v0\\mathbf{v}_0v0​实际指明了耗油量空间的一个向量，然而我们知道耗油量没有负值（如果有的话人类就拥有无限能源了），一个完全指向负的方向意义不大，如果改变v0\\mathbf{v}_0v0​的符号，变为： v0=[0.150.960.140.20]\\mathbf{v}_0 = \\begin{bmatrix} 0.15 \\\\ 0.96 \\\\ 0.14 \\\\ 0.20 \\\\ \\end{bmatrix} v0​=⎣⎢⎢⎡​0.150.960.140.20​⎦⎥⎥⎤​ 结果就合理多了。 文献中指出，奇异向量的符号应当与大多数数据样本向量的符号相同，从几何上来看，奇异向量应当指向大多数向量指向的方向。下图是我从文献中截取的，深色蓝线是正确的奇异向量方向，浅色蓝线是数据向量。 翻译成数学语言（我按照自己的理解和习惯转化成优化问题，与文献的原始表述并不一致，不一定对，有兴趣的读者可以看原始文献😃)，纠正符号算法的核心是对于每一对奇异向量uk\\mathbf{u}_kuk​和vk\\mathbf{v}_kvk​，寻找符号sks_ksk​优化以下目标函数 arg max⁡sk∈{1,−1}sk(∑j=1NukTX⋅,j+∑i=1MXi,⋅vk)\\begin{aligned} \\argmax_{s_k \\in \\{1,-1\\}}\\quad s_k \\left(\\sum_{j=1}^N \\mathbf{u}_k^T\\mathbf{X}_{\\cdot,j} + \\sum_{i=1}^M\\mathbf{X}_{i,\\cdot}\\mathbf{v}_k\\right) \\end{aligned} sk​∈{1,−1}argmax​sk​(j=1∑N​ukT​X⋅,j​+i=1∑M​Xi,⋅​vk​)​ 根据两项求和项的符号即可决定sks_ksk​的符号。对于可能存在的左右奇异向量符号冲突的情况（例如单独看左奇异向量有意义的符号是-1，单独看右奇异向量有意义的符号为1），该算法选择以求和绝对值最大的一项的符号为主（反应在上式就是两项求和）。文献中指出，该算法仅在上述求和项不为0的情况下有效（即在0附近奇异向量的符号可以为任意情况）。 Python版具体算法实现如下，Matlab可以使用这个版本： 123456789101112131415161718192021222324import warningsimport numpy as npdef sign_flip(u, s, vh=None): &quot;&quot;&quot;Flip signs of SVD or EIG. &quot;&quot;&quot; left_proj = 0 if vh is not None: left_proj = np.sum(s[:, np.newaxis]*vh, axis=-1) right_proj = np.sum(u*s, axis=0) total_proj = left_proj + right_proj signs = np.sign(total_proj) random_idx = (signs==0) if np.any(random_idx): signs[random_idx] = 1 warnings.warn(&quot;The magnitude is close to zero, the sign will become arbitrary.&quot;) u = u*signs if vh is not None: vh = signs[:, np.newaxis]*vh return u, s, vh","categories":[{"name":"机器学习","slug":"机器学习","permalink":"https://mrswolf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"https://mrswolf.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"矩阵分解","slug":"矩阵分解","permalink":"https://mrswolf.github.io/tags/%E7%9F%A9%E9%98%B5%E5%88%86%E8%A7%A3/"}]},{"title":"manjaro踩坑记(2022更新版)","slug":"manjaro踩坑记","date":"2019-05-23T16:00:00.000Z","updated":"2022-03-20T16:00:00.000Z","comments":false,"path":"2019/05/24/manjaro踩坑记/","link":"","permalink":"https://mrswolf.github.io/2019/05/24/manjaro%E8%B8%A9%E5%9D%91%E8%AE%B0/","excerpt":"从2019年到2022年，manjaro发行版渡过了我的整个博士生涯。最近毕业重新装了系统，依然选择了最新的manjaro KDE Plasma 21.2.4（本来装了arch，大小问题不断被劝退了😜）。基本上这台linux主机要跟着我进入人生下一阶段，作为主力台式机也不打算再折腾了。安装过程中有一些新的学习体会（坑），在这里更新记录一下，希望能帮到有需要的朋友～","text":"从2019年到2022年，manjaro发行版渡过了我的整个博士生涯。最近毕业重新装了系统，依然选择了最新的manjaro KDE Plasma 21.2.4（本来装了arch，大小问题不断被劝退了😜）。基本上这台linux主机要跟着我进入人生下一阶段，作为主力台式机也不打算再折腾了。安装过程中有一些新的学习体会（坑），在这里更新记录一下，希望能帮到有需要的朋友～ 三年manjaro使用感悟 总体而言，作为一个linux系统小白，我对manjaro还是相当满意的，基本上，manjaro能满足我日常工作、娱乐的需要。manjaro系统安装显卡驱动和切换内核确实简单，只需在系统设置里改变即可，此外，arch文档翔实、aur软件丰富，大部分问题和需求都能找到对应的解决方案。linux下的开发、科研等涉及编程的工作确实要比windows下爽很多，一行命令搞定一堆安装包，然后用就完了，计算速度上似乎还比window下快一点（也许是心理作用？😁）。游戏方面steam上兼容linux的游戏还是挺多的，我常玩的饥荒、博德之门3等游戏都还能运行，偶尔有问题的话去protonDB上查一查还是能找到解决方案的，Valve不愧是要搞Steam Deck，估计这方面的兼容性支持会更好。 manjaro的缺点也是大多数linux系统的通病。为了满足正常使用，用户要做一些文本方面的配置，因此至少需要知道一些命令行的基础知识，这一点上远不如windows点点点直观，而且经常会出现一些奇奇怪怪的小问题，很影响使用体验。此外，linux系统的驱动相对windows依然是个大问题，驱动（尤其是显卡）出问题小白用户就直接GAME OVER了。最后，尽管9成需求我都能在manjaro下解决，仍有1成的需求由于各种原因必须要使用windows，我通常都是挂个windows虚拟机以备不时之需。 综上所述，我感觉manjaro系统适合满足以下条件的小白群体使用： 至少有1台独立的windows笔记本 不惧怕查阅资料，能科学上网 有一段完整的折腾时间 没有大型3A游戏或windows专用软件需求 安装manjaro的硬件不是最新的 不满足第一条的朋友还是老老实实用windows，在虚拟机里尝尝鲜得了😜，至于mac用户，俺们不跟土豪做朋友😢 系统选择与安装 manjaro提供了XFCE、KDE和GNOME三个桌面的环境的安装iso，我个人偏向于KDE，用着舒服，看着也不赖，倒是没必要再去捣鼓桌面美化啥的。这里建议下载Minimal LTS（长期支持版内核）安装镜像，以最大限度的避免硬件驱动等各种乱七八糟的问题。我选用的5.4版内核会一直支持到2025年12月，虽然听说kernel版本越高，硬件支持越好，但我实际装的时候最新版本各种诡异驱动问题（咱也不懂，就很玄学），所以还是从LTS出发，先达成一个基本可用的环境，再慢慢升级比较靠谱。 最好进BIOS把内存频率调低，比如2400MHz或2666MHz，我的内存一开始是3000MHz，很容易卡在进图形界面的步骤，查资料好像是啥显卡驱动没有加载上，需要Early Loading，但是我没有成功过，后来发现把内存频率调低就可以了，就很玄学 下载ISO文件后，用空余的U盘制作启动盘，插上U盘，进BIOS里关掉安全启动（Secure Boot）选项，把U盘的启动顺序调到前面，保存退出后就能进入manjaro的启动界面环境。 这里设置一下时区为Asia/Shanghai，选择以开源驱动boot，其它的选项都不用改，反正后期都能调整，核心目的是进入live环境。 进去之后会弹出欢迎界面，选择中文语言，一路点击下一步直到分区步骤（这里有时候会卡一会，可能是在联网检测啥东西）。 分区界面根据实际硬件的不同会有各种选项，抹除磁盘是自动分区安装的意思，适合不太清楚什么是分区的朋友，一路点点点就行。如果硬盘上还装了windows，manjaro还会有双引导的安装选项，可以说挺简单智能的了，桌面上的Installation Guide会有这些选项的详细介绍。由于manjaro会将所有可用空间全部归到root分区，我想单独划个home分区出来，所以选择了手动方法。这里我分了一个500MB的efi分区，2GB的swap分区（感觉用不上），64GB的root分区，剩下的都划到home分区了。划好分区后点击下一步，设置一些用户名、密码啥的，就可以进入安装过程，安装结束后重启、拔U盘，一切顺利的话就进入manjaro系统了～ 基础设置 设置manjaro更新镜像源 由于众所周知的原因，不更改镜像源和设置科学上网，大部分的开发工具在国内基本没法用。所以进系统的第一步是更改manjaro的系统更新镜像源，选择所在地区的镜像。 1sudo pacman-mirrors -c China -m rank &amp;&amp; sudo pacman -Syyu 该命令选择China地区的镜像源，并对系统做一次更新，因此可能需要等待一会，更新完最好直接重启。 安装Nvidia显卡驱动 重启过后，可以选择安装显卡驱动了。在系统设置-硬件设定里选择闭源驱动。我的显卡是GTX1080,好几年前的老卡了，video-nvidia-470xx驱动比较靠谱，如果想用最新的驱动，选择video-nvidia驱动就可以。 右键安装，输入管理员密码，安装完毕后重新启动，如果一切顺利进入桌面就表明没问题啦！！！ 科学上网 国内软件安装的大部分问题都是因为众所周知的原因，并且优秀开发和参考资料多为英文，因此科学上网属于一切学术研究和开发工作的必要条件，将科学上网作为终身学习的课题，花时间研究是值得的。 我采用的是proxychains结合v2ray的方式，不再使用之前的shadowsocks： 1sudo pacman -S proxychains-ng v2ray proxychains的配置文件为/etc/proxychains.conf，用kate打开该文件，修改最后一行： 1socks5 127.0.0.1 1080 v2ray的配置文件在/etc/v2ray目录下，这一部分有很多的学习资料了，我写了一个脚本自动获取生成配置文件config1.json，启动部分我采用手动挡输入命令，以后有空再研究自动挡的方式： 1v2ray -c /etc/v2ray/config1.json 科学上网的基本设置就结束了，浏览器可以在网络设置中选择socks5代理，转发本地1080端口；想要代理命令行程序，可以采用proxychains+命令的方式，比如： 1proxychains -q wget www.google.com 安装yay 安装yay yay可以当作pacman使用，也是用来安装AUR里软件包的工具，尽管manjaro自带的软件包管理器Pamac可以开启aur选项，以图形化界面的形式安装软件，但是Pamac似乎有许多bug，所以还是使用yay这一更常用的命令行工具。 manjaro下yay的安装非常简单，甚至不需要自己去编译: 1sudo pacman -S yay proxychains+yay 至此yay已经可以正常使用了，不过AUR里的软件包经常需要下载github等外网代码、文件，由于众所周知的原因，速度会慢的跟龟爬一样，所以最好还是搭配proxychains等工具使用。默认的yay采用go编译，这一版本同proxychains等代理工具有冲突，解决方案是用gcc-go重新编译，但是目前的v11.1.2版本的yay编译过不去，我没有能力解决问题，只能选择v11.1.1的yay。 1234yay -S base-devel gcc-gomkdir build &amp;&amp; cd build &amp;&amp; git clone https://aur.archlinux.org/yay.gitcd yayproxychains -q wget https://github.com/Jguer/yay/archive/v11.1.1.tar.gz 然后用kate修改PKGBUILD里如下部分： 123456789101112pkgname=yaypkgver=11.1.1 # 修改版本为11.1.1...makedepends=(&#x27;gcc-go&gt;=1.16&#x27;) # 修改为gcc-go&gt;=1.16source=(&quot;$&#123;pkgname&#125;-$&#123;pkgver&#125;.tar.gz::https://github.com/Jguer/yay/archive/v$&#123;pkgver&#125;.tar.gz&quot;)sha256sums=(&#x27;31ed6d828574601e77b8df90c6e734a230ea60531b704934038d52fe213c0898&#x27;) # 修改sha256的值... 由于yay会下载一些go的依赖，所以也要设置go的代理（众所周知😥），最后yay的目录下直接编译安装，此时的yay就可以跟proxychains完美配合啦，接下来我基本都使用yay安装manjaro官方和AUR的软件~ 123export GO111MODULE=onexport GOPROXY=https://goproxy.cnmakepkg -sic 忽略yay的更新 由于目前11.1.2版本的yay是manjaro默认的版本，更新系统时会自动替换老版本11.1.1，如果不想更新yay，可以在/etc/pacman.conf中忽略yay的更新，添加如下内容： 1IgnorePkg = yay 中文字体和中文输入法 开源中文字体 国内习惯了用windows自带的中文字体，比如楷体、宋体等，而这些在linux上因为版权问题发行版不会默认自带，需要我们自己“安装”使用（毕竟已经买了windows的笔记本了，用就完了哈哈哈）。当然有些字体是免费开源的： 1yay -S wqy-microhei wqy-microhei-lite wqy-zenhei noto-fonts-cjk adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts 中文输入法 中文输入法采用fcitx5，输入以下命令安装： 1yay -S fcitx5 fcitx5-configtool fcitx5-chinese-addons fcitx5-qt fcitx5-gtk fcitx5-lua 安装完毕后用kate打开/etc/environment文件，在其中输入如下变量，然后注销再重新登陆，就可以使用中文输入法了： 123456GTK_IM_MODULE=fcitxQT_IM_MODULE=fcitxXMODIFIERS=@im=fcitxINPUT_METHOD=fcitxSDL_IM_MODULE=fcitxGLFW_IM_MODULE=ibus 默认拼音和英文的切换快捷键是ctrl+shift，不喜欢的话可以在系统设置-区域设置-输入法里进行调整，更多的相关设置也可以参考arch的中文输入法。 win10字体安装 想要安装win10的字体（十分有必要），AUR提供了ttf-ms-win10的安装包，不过不提供字体文件，需要自己从已有的win10系统（拷贝所有C:\\Windows\\Fonts下的字体文件）或从win10镜像中抽取字体文件，这里介绍如何抽取字体，首先从AUR拷贝tff-ms-win10： 12mkdir -p build &amp;&amp; cd buildgit clone https://aur.archlinux.org/ttf-ms-win10.git 然后挂载win10安装镜像，manjaro下只需要右键选择挂载ISO，Dolphin的左边即可出现ISO的访问文件路径，找出source文件夹下的install.esd或install.wim文件，把该文件拷贝到ttf-ms-win10文件夹下，执行如下命令解锁所有字体文件： 1wimextract install.esd 1 /Windows/&#123;Fonts/&quot;*&quot;.&#123;ttf,ttc&#125;,System32/Licenses/neutral/&quot;*&quot;/&quot;*&quot;/license.rtf&#125; --dest-dir . 然后修改PKGBUILD如下，添加的字体文件表示仿宋、黑体和楷体： 1234567_ttf_ms_win10_zh_cn=(simsun.ttc simfang.ttf simhei.ttf simkai.ttf # 增加这行内容simsunb.ttf msyh.ttc msyhbd.ttc msyhl.ttc 最后在ttf-ms-win10目录下执行安装命令，注意如果报错，大概率是当前抽取的字体文件中没有该字体，可以按照错误提示从网上下载ttf文件加入其中，或者在PKGBUILD里删掉该字体，毕竟只有中文字体比较重要： 1makepkg -sic --skipchecksums 安装完成后可以在系统设置-外观-字体管理中检查字体安装是否正确。 Ryzen随机卡死问题 这个问题三年前就遇到了，当时系统会随机卡死无响应（切terminal什么都没用）。这个问题是Ryzen处理器的一个bug，不知道现在的Ryzen系列有没有解决这个问题（我是AMD Ryzen 5 1600，也是老处理器了），总之我重装系统后依然有这个问题。解决方案就是disable C6 state，最好重启后再执行如下命令： 12yay -S disable-c6-systemdsudo modprobe msr 编辑/etc/modules-load.d/modules.conf，添加msr这一行，以便在启动时加载msr模块： 1msr 最后，启动如下service： 12sudo systemctl enable disable-c6.servicesudo systemctl start disable-c6.service 过去三年里基本没有出现这种随机卡死的问题了，感恩大佬。 其他优化 SSD优化 12sudo systemctl enable fstrim.timersudo systemctl start fstrim.timer 切换登陆终端 manjaro默认的zsh十分好用，不过非图形界面下的terminal还是bash，可以设为zsh： 12cat /etc/shellschsh -s /bin/zsh 切换内核版本 在系统设置-内核中点点就好啦，会安装一大堆东西，装完重启一下。 我切回了5.4的内核，新换内核后原内核最好保留一段时间，避免系统挂掉，还可以在初始启动界面选择从哪个内核进入系统。 常用软件安装 miniconda+python python作为我科研的主力编程语言，我选择用conda管理不同的python版本，首先安装miniconda，运行后一路回车或yes,最后会询问要不要把conda加入环境变量，这里可以选择no： 123wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.shchmod +x Miniconda3-latest-Linux-x86_64.sh./Miniconda3-latest-Linux-x86_64.sh 注意在terminal中还是没法直接使用conda的，因为不知道conda安装在哪，这里执行如下命令写入环境变量： 1～/miniconda3/bin/conda init zsh 退出terminal再重开，就能使用conda啦～ manjaro原来的terminal使用的是bash，2022版konsole使用了zsh（自带颜色、命令记忆补全，超级赞😃），如果想在bash中使用conda，将上面的zsh换成bash即可完成初始化的操作。bash的相关设置在.bashrc里，zsh的相关设置在.zshrc里，两者是默认不互通的。 老规矩，由于众所周知的原因，需要更换conda的镜像源，这里用清华tuna的镜像： 1conda config --set show_channel_urls yes 在.condarc文件里粘贴以下内容： 123456789101112131415channels: - defaultsshow_channel_urls: truedefault_channels: - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2custom_channels: conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud 另外pip的源最好也更改一下： 1pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple wps office办公 linux上最好用的office软件套装，搭配前面的win10字体可以做很多文字工作，不用切换到windows，安装如下AUR软件包： 1yay -S wps-office wps-office-mui-zh-cn ttf-wps-fonts 装完最好重启一下，目前我没遇到啥大问题，如果有问题的话可以看看arch的wiki。 vscode编辑器 超好用的编辑器，建议安装微软的二进制版本，可以多搜到一些好用的扩展包： 1yay -S visual-studio-code-bin virtualbox虚拟机 如果要使用微信之类国产软件的话，用虚拟机装个windows就行了，还能跟主系统隔离开来，台式机也不太考虑性能问题，这里建议参考manjaro的wiki，注意自己的linux内核版本，比如我的是linux54，别的版本需要替换下面命令中的linux54。 1sudo pacman -S virtualbox linux54-virtualbox-host-modules 安装完成后最好重启再完成后续工作。重启后需要安装扩展增强包，先看一下自己的virtualbox版本： 1vboxmanage --version 比如我是6.1.32r149290，那我就需要安装对应版本的扩展包，使用yay搜索可用的扩展包： 1yay virtualbox-ext-oracle 会弹出很多选项，要安装哪个输入序号回车。 最后需要将当前的用户加入vboxuser组，重启或注销就可以使用虚拟机啦～ 1sudo gpasswd -a $USER vboxusers LaTex论文写作 即使作为科研垃圾，也不得不产出论文:woozy_face:。科技论文写作里LaTex可比word好用多了（前提是有模板），manjaro安装LaTex也很简单，配合vscode的LaTex扩展写论文不要太爽。 1yay -S texlive-most texlive-lang biber texlive-bibtexextra texlive-fontsextra 安完之后去vscode扩展里装LaTex Workshop，就可以开始写作了。如果要写中文论文，可以在vscode的settings.json里输入如下内容（一般vscode敲完latex-workshop.latex.tools之后就会自动补全后面值，在最前面添加一个就好）： 123456789101112131415161718192021222324252627&#123; &quot;latex-workshop.latex.tools&quot;: [ &#123; &quot;name&quot;: &quot;xelatexmk&quot;, &quot;command&quot;: &quot;latexmk&quot;, &quot;args&quot;: [ &quot;-synctex=1&quot;, &quot;-interaction=nonstopmode&quot;, &quot;-file-line-error&quot;, &quot;-xelatex&quot;, &quot;-outdir=%OUTDIR%&quot;, &quot;%DOC%&quot; ], &quot;env&quot;: &#123;&#125; &#125; ], &quot;latex-workshop.latex.recipes&quot;: [ &#123; &quot;name&quot;: &quot;xelatexmk 🔃&quot;, &quot;tools&quot;: [ &quot;xelatexmk&quot; ] &#125; ], &quot;latex-workshop.view.pdf.viewer&quot;: &quot;external&quot;, &quot;latex-workshop.latex.recipe.default&quot;: &quot;lastUsed&quot;&#125; 然后使用扩展菜单中的xelatexmk就可以编译中文内容啦～ OneDrive网盘 一直用onedrive习惯了，配合代理速度也还行，不太想用国内的其他网盘🤐。manjaro下使用这个项目的onedrive命令行来同步： 12yay -S onedrive-abrauneggonedrive 按照提示进行设置，设置完成后就可以使用了，因为我比较懒，没有研究自动同步功能，所以都是配合代理手动同步： 1proxychains -q onedrive --synchronize 反正又不是不能用，有空再看看自动同步咋搞。 xmind思维导图 AUR仓库里自带xmind8，直接输入以下命令即可： 1yay -S xmind 不过这一版本的xmind需要openjdk8的依赖才能运行，执行以下命令安装openjdk8： 1yay -S jdk8-openjdk 然后用kate或code打开/usr/share/xmind/XMind/XMind.ini文件，在文件开头添加如下文本： 12-vm/usr/lib/jvm/java-8-openjdk/bin 保存退出，xmind就能正常运行啦！ hexo博客管理 我的博客部署在github pages上，采用hexo管理，首先需要安装nodejs，用AUR的nvm管理不同的node版本： 1234yay -S nvm#使用nvm前需要运行这一句，可以将其写入.zshrc或.bashrcsource /usr/share/nvm/init-nvm.shnvm install node 然后安装npm及hexo： 123yay -S npmnpm install hexo-cli -gnpm install hexo-deployer-git --save hexo的使用方法可见参考文档。 其他软件 qBittorrent 还没有把硬盘填满吗？快使用qBittorrent吧～ 1yay -S qbittorrent yesplaymusic+spotify yesplaymusic是网易云音乐的替代，超漂亮的云音乐播放器，没有乱七八糟的功能，颜值党狂喜，安装简单（需要proxychains，老实讲大部分从github下载文件的都需要）: 1proxychains -q yay -S yesplaymusic 除此之外也可以安装spotify，让我们一起聆听IU的美妙歌声😍。 1proxychains -q yay -S spotify 大陆地区反正不挂代理能用，不能用再说，又没有交钱，要什么自行车～ PS：视频播放器直接用自带的VLC就好，功能强大，没啥不能播的。 文件名编码转换 windows默认GB2312，linux一般用UTF-8，从windows拷贝过来的中文文件名有时候是乱码，可以用convmv转化一下： 12345yay -S convmv# 测试转换是否成功，不实际执行转换convmv -f GBK -t UTF-8 -r your_folder_or_file# 执行实际转换convmv -f GBK -t UTF-8 -r --notest your_folder_or_file ufw防火墙服务 manjaro默认不带ufw防火墙，虽然我听说可以用iptables添加规则，但目前不懂怎么设置，先装了gufw： 123yay -S ufw gufwsudo systemctl enable ufw.servicesudo systemctl start ufw.service 开始菜单里就会出现防火墙配置的程序，先使用默认的就好，以后再研究。 远程桌面 如果有远程桌面的需求，比如连接windows笔记本、树莓派之类的，可以使用Remmina： 1yay -S remmina freerdp libvncserver spice-gtk caj2pdf 中国知网大部分论文都是caj格式（什么垃圾玩意），在linux下先转换成pdf格式再阅读比较方便，这里推荐caj2pdf工具，当然成功与否全部靠命。 1234proxychains -q yay -S caj2pdf# 转换caj到pdfcaj2pdf convert 某篇博士论文.caj -o 某篇博士论文.pdf colorpicker 还在为做PPT找不到好配色烦恼吗？安装colorpicker，运行命令，鼠标一点即可获取颜色的RGB和Hex值，获取完直接ctrl+c退出。 12proxychains -q yay -S colorpickercolorpicker Troubleshooting 这里放一些或许有的问题，方便大家排查，没事干时多看看KSystemlog~ spam log baloo limit","categories":[{"name":"linux","slug":"linux","permalink":"https://mrswolf.github.io/categories/linux/"}],"tags":[{"name":"manjaro","slug":"manjaro","permalink":"https://mrswolf.github.io/tags/manjaro/"},{"name":"linux","slug":"linux","permalink":"https://mrswolf.github.io/tags/linux/"}]},{"title":"MATLAB分布式集群搭建记录","slug":"MATLAB分布式集群搭建记录","date":"2019-05-19T16:00:00.000Z","updated":"2022-03-20T16:00:00.000Z","comments":false,"path":"2019/05/20/MATLAB分布式集群搭建记录/","link":"","permalink":"https://mrswolf.github.io/2019/05/20/MATLAB%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/","excerpt":"本篇的内容可能过时啦 虽然我很久不用MATLAB处理日常工作，但是实验室主流依然是MATLAB（用Python的就那么几个T_T)。以前小伙伴们跑程序都是拷贝程序和数据到实验室的计算服务器上，手工开N个MATLAB窗口做运算。现在实验室规模扩大，这种手工的方式越来越繁琐。我从前用MATLAB时就想试试集群计算，奈何当时实验室没啥硬件条件，正好现在有机会，我干脆搭了个MATLAB集群供小伙伴使用。","text":"本篇的内容可能过时啦 虽然我很久不用MATLAB处理日常工作，但是实验室主流依然是MATLAB（用Python的就那么几个T_T)。以前小伙伴们跑程序都是拷贝程序和数据到实验室的计算服务器上，手工开N个MATLAB窗口做运算。现在实验室规模扩大，这种手工的方式越来越繁琐。我从前用MATLAB时就想试试集群计算，奈何当时实验室没啥硬件条件，正好现在有机会，我干脆搭了个MATLAB集群供小伙伴使用。 软硬件 硬件方面： 4核心, 16GB内存， 百兆网卡普通台式机(manage节点) 40核心, 128GB内存, 千兆网卡计算服务器(compute1节点) 346TB存储， 千兆网卡存储服务器(storage节点) 软件方面： Windows10专业版系统 centos7 matlab2017b 网络环境： 192.168.130.12(matlab-manage.xxx.org) – manage节点 192.168.130.11(matlab-compute1.xxx.org) – compute1节点 192.168.130.10 – storage节点 MATLAB的帮助文档中提出，想要使用集群计算服务应该满足以下条件： 推荐一个CPU核心最多创建一个worker 推荐每个worker最少可以使用2GB内存 最少5GB的硬盘空间容纳暂时性的数据文件 计算集群之间应当使用同构的计算架构(要求计算节点的硬件配置、系统和软件配置一致) 集群安装配置 ip域名设置 修改compute节点和manage节点的计算机名、ip地址以及DNS域名解析，例如compute1节点的计算机名为matlab-compute1.xxx.org(xxx.org为后缀域名)，DNS域名也应该为matlab-compute1.xxx.org，ip地址为192.168.130.11。 MATLAB分布式计算服务似乎要求计算机名要添加后缀域名(xxx.org)，否则在集群测试时会有解析不匹配的警告，Windows专业版可在这台电脑-属性-更改设置-更改-其他中添加主DNS后缀。 manage节点 在manage节点安装matlab2017b，manage节点在安装过程中应该勾选MATLAB License Server和MATLAB Distributed Computing Server工具箱，前者为集群提供license认证服务，后者是分布式计算的核心服务组件。对于破解版的MATLAB，应该输入floating license的key而不是standalone的key，才能安装MATLAB License Server。安装完毕（并破解）后，在Windows服务选项卡中启动MATLAB License Server服务。 同时修改C:\\Program Files\\MATLAB\\R2017b\\licenses\\network.lic为如下内容 12SERVER this_host ANYUSE_SERVER 修改C:\\Program Files\\MATLAB\\R2017b\\toolbox\\distcomp\\bin\\mdce_def.bat其中的security level为2 1set SECURITY_LEVEL=2 设置security level为2的效果是要求用户在使用分布式计算服务时输入用户名，从而可以监控集群使用情况。 启动MATLAB，切换到C:\\Program Files\\MATLAB\\R2017b\\toolbox\\distcomp\\bin目录下，在MATLAB命令行窗口输入如下命令安装并启动mdce服务 12!mdce install !mdce start 最好在MATLAB命令行窗口内启动mdce服务，如果在Windows服务选项卡中启动服务，会出现权限问题导致集群worker无法连接。 启动mdce服务后最好双击运行C:\\Program Files\\MATLAB\\R2017b\\toolbox\\distcomp\\bin\\addMatlabToWindowsFirewall.bat文件（我的做法是直接关闭Windows防火墙避免多余的问题） compute节点 compute节点的安装配置同manage节点，仅以下内容不同 安装matlab时无需勾选MATLAB License Server工具箱 修改C:\\Program Files\\MATLAB\\R2017b\\licenses\\network.lic为如下内容 12SERVER matlab-manage.xxx.org ANYUSE_SERVER 此外为了跟storage节点连接，compute节点需要安装NFS服务，在程序和功能-启用或关闭Windows功能中勾选NFS服务 storage节点 storage节点设置NFS服务，NFS服务端安装和配置网上都有，我就不写了。 添加集群节点 在manage节点运行C:\\Program Files\\MATLAB\\R2017b\\toolbox\\distcomp\\bin\\admincenter.bat，启动管理面板，点击Add or Find，添加manage节点和compute1节点，添加完毕后，点击Test Connectivity，测试通过如下图 在MATLAB Job Scheduler面板点击start启动scheduler，输入名称，选择scheduler的节点为matlab-manage.xxx.org，因为security level为2，还需要设置管理员的密码。 设置好scheduler后，右键scheduler点击Start Workers，勾选compute1节点，设置启动的worker数量（我只有40个核心，所以启动40个worker）。 客户端配置和使用 MATLAB集群计算要求客户端的matlab版本和服务端一致，因为我服务端安装的是2017b，客户端也应该是matlab2017b。客户端可以选择standalone安装方式，也需要安装mdce服务添加防火墙配置并启动。 如果客户端想直接使用NFS服务，也需要在程序和功能-启用或关闭Windows功能中勾选NFS服务。 安装完毕后，在MATLAB主页中的Parallel选项选择Discover Cluster，勾选On your network，点击Next等待发现集群mjs40_2，选择集群，点击Next，Finish，就可以使用集群了，集群的使用情况可以在Parallel选项里Monitor Jobs查看。 这里提供两个matlab并行计算脚本检测集群配置是否正确 12345678910%This demo shows how to use distributed computing serverprimeNumbers = primes(uint64(2^21));compositeNumbers = primeNumbers.*primeNumbers(randperm(numel(primeNumbers)));factors = zeros(numel(primeNumbers),2);tic;parfor idx = 1:numel(compositeNumbers) factors(idx,:) = factor(compositeNumbers(idx));endtoc 1234567891011%This demo shows how to load data from nfs server, target_folder is nfs server ip addresstarget_folder=&#x27;\\\\192.168.130.10\\pub\\data\\&#x27;;factors=zeros(400,2);tic;parfor i=0:399 tmp = load([target_folder,num2str(i),&#x27;.mat&#x27;]); data = tmp.data; factors(i+1, :)=factor(data);endtoc","categories":[{"name":"分布式计算","slug":"分布式计算","permalink":"https://mrswolf.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97/"}],"tags":[{"name":"matlab","slug":"matlab","permalink":"https://mrswolf.github.io/tags/matlab/"}]}],"categories":[{"name":"机器学习","slug":"机器学习","permalink":"https://mrswolf.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"linux","slug":"linux","permalink":"https://mrswolf.github.io/categories/linux/"},{"name":"分布式计算","slug":"分布式计算","permalink":"https://mrswolf.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97/"}],"tags":[{"name":"机器学习","slug":"机器学习","permalink":"https://mrswolf.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"},{"name":"矩阵分解","slug":"矩阵分解","permalink":"https://mrswolf.github.io/tags/%E7%9F%A9%E9%98%B5%E5%88%86%E8%A7%A3/"},{"name":"manjaro","slug":"manjaro","permalink":"https://mrswolf.github.io/tags/manjaro/"},{"name":"linux","slug":"linux","permalink":"https://mrswolf.github.io/tags/linux/"},{"name":"matlab","slug":"matlab","permalink":"https://mrswolf.github.io/tags/matlab/"}]}